{"componentChunkName":"component---src-templates-blog-post-js","path":"/express/","result":{"data":{"site":{"siteMetadata":{"title":"Helton's Blog"}},"markdownRemark":{"id":"9c2444ed-e256-5733-8330-ee6c0207ff6e","excerpt":"ExpressJS is a web application framework for NodeJS. It’s minimal and flexible, great for building Web APIs. Popular services are built on it, like MySpace and…","html":"<p>ExpressJS is a web application framework for NodeJS. It’s minimal and flexible, great for building Web APIs.</p>\n<p>Popular services are built on it, like <em>MySpace</em> and <em>Ghost</em>.</p>\n<p>It’s also the foundation for other tools and frameworks, like <em>Kraken</em> and <em>Sails</em>.</p>\n<h2>Installing (via yarn)</h2>\n<p><code class=\"language-text\">yarn add express</code></p>\n<h2>Installing (via npm)</h2>\n<p><code class=\"language-text\">npm install express --save</code></p>\n<h2>Getting Started</h2>\n<p>Let’s write our first Expression app.</p>\n<p>I’m gonna use ES6 features here because it’s cool (and because I want to). To try it by yourself make sure you use <a href=\"https://babeljs.io/\">Babel</a> or anything that can transpile your code to ES5.</p>\n<p>First, the boilerplate: importing stuff:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Well, that’s enough to get an <code class=\"language-text\">app</code> instance. Now let’s define our single route. With that our server will be able to answer <code class=\"language-text\">http://localhost:&lt;port&gt;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">get</code> method provide a callback function, where we can access the <strong>request</strong> (<code class=\"language-text\">req</code>) and the <strong>response</strong> (<code class=\"language-text\">res</code>) parameters. These parameters inherit from <a href=\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\">http.IncomingMessage</a> and <a href=\"https://nodejs.org/api/http.html#http_class_http_serverresponse\">http.ServerResponse</a> Node classes respectively, so we’re able to access their methods as well. For instance, we can do:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, it's me again\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Is that so? Not quite, we still need to tell it to listen some port:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What if I want to get some information to know if the server is really running? Well, you can attach a callback function when calling <code class=\"language-text\">listen</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Server running at http://localhost:'</span> <span class=\"token operator\">+</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now our app is ready. Let’s put it to run:</p>\n<p><code class=\"language-text\">$ node app.js</code></p>\n<p>You should see the following output:</p>\n<p><code class=\"language-text\">Server running at http://localhost:3000</code></p>\n<p>I didn’t get it. What did we do exactly?</p>\n<h2>Middleware</h2>\n<p>Well, we defined a custom <a href=\"http://expressjs.com/en/guide/writing-middleware.html\">middleware</a>. They’re functions executed <strong>sequentially</strong> that access the <strong>request</strong>, <strong>response</strong> and the next <strong>middleware</strong>, being responsable to handle the response (or pass it to the other <em>middleware</em>). They are stacked into each other.</p>\n<p>Inside each middleware we can do things like:</p>\n<ul>\n<li>Validation</li>\n<li>Authentication</li>\n<li>Data Parsing</li>\n</ul>\n<p>and so on…</p>\n<p>When a request comes in, it passes through each middleware before reaching the routes, like a plumbing pipe.</p>\n<p>Calling <code class=\"language-text\">next()</code> the middlware passes the control to the next middlware available in the stack to handle the request. Don’t <del>ever ever</del> try to call <code class=\"language-text\">next()</code> after your response is completed (it’ll cause <strong>errors</strong>, believe me).</p>\n<p><img src=\"./middleware-stack.png\" alt=\"Middleware Stack\"></p>\n<p>For a more detailed explanation, take a look at: <a href=\"http://javascript.tutorialhorizon.com/2014/09/19/understanding-expressjs-middleware-with-a-visual-example/\">Understanding expressjs middleware with a visual example</a></p>\n<p>I also borrowed the image below from the Express site itself. It helps to explain each middleware piece.</p>\n<p><img src=\"./express-middleware-stack.png\" alt=\"Express Middleware\"></p>\n<p>So, you need a JSON as a result, right? Easy, just send a JavaScript object as response:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/blocks-as-json'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> blocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Fixed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Movable'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Rotating'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>blocks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">send</code> function converts Object and Arrays to JSON.</p>\n<p>Did I hear HTML? All right, <code class=\"language-text\">send</code> function can handle it as well (magic!):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/blocks-as-html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> blocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Fixed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Movable'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Rotating'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> html <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;ul>'</span><span class=\"token punctuation\">;</span>\n  blocks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">block</span> <span class=\"token operator\">=></span> html <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>block<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  html <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;/ul>'</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, <strong>this is just an example</strong>. If you really need to do <strong>server-side rendering</strong> go for <a href=\"http://www.embeddedjs.com/\">ESJ</a>, <a href=\"https://pugjs.org/api/getting-started.html\">Pug</a> (formerly <em>Jade</em>), <a href=\"http://handlebarsjs.com/\">Handlebars</a> ou any shinny template engine you like.</p>\n<h2>Redirecting</h2>\n<p>To redirecto to a relative path, use the <code class=\"language-text\">redirect</code> method available on <code class=\"language-text\">response</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/i-will-not-be-here-for-a-while'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By default it’ll respond with a <strong>HTTP 302</strong> status code (Moved Temporarly). In order to change it (to <strong>HTTP 301</strong> [Moved Permanently], for instance), pass it as the first parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/i-am-definitely-not-here'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token number\">301</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Send files</h2>\n<p>Suppose that we have a <strong>index.html</strong> file in a public folder that we want to serve at <code class=\"language-text\">/home</code>. How can we do it with Express? Piece of cake:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/public/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pay attention to the <code class=\"language-text\">__dirname</code>. It’s necessary to correctly locate our <strong>index.html</strong> based on the current path. We could’ve use <code class=\"language-text\">./public/index.html</code> instead as well.</p>\n<h2>Send files with express.static</h2>\n<p>We can also use the <code class=\"language-text\">express.static</code> middleware (the only <strong>middleware</strong> that’s current shipped with Express) to do the job:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/public/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What if I have a bunch of files in the public direcetory? You don’t expect me to reference one-by-one, don’t you?\nOf course not. Just tell <code class=\"language-text\">express.static</code> to <strong>serves everything</strong> under the specified folder:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Express","date":"December 29, 2019","description":"Bringing Node.js to the next level"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/express/","previous":{"fields":{"slug":"/redux/"},"frontmatter":{"title":"Redux"}},"next":null}}}