<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Helton's Blog]]></title><description><![CDATA[My personal blog. Tips and opinions about tech.]]></description><link>https://helton.github.io/blog</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 29 Dec 2019 17:17:31 GMT</lastBuildDate><item><title><![CDATA[Express]]></title><description><![CDATA[ExpressJS is a web application framework for NodeJS. It’s minimal and flexible, great for building Web APIs. Popular services are built on…]]></description><link>https://helton.github.io/blog/express/</link><guid isPermaLink="false">https://helton.github.io/blog/express/</guid><pubDate>Sun, 29 Dec 2019 13:01:00 GMT</pubDate><content:encoded>&lt;p&gt;ExpressJS is a web application framework for NodeJS. It’s minimal and flexible, great for building Web APIs.&lt;/p&gt;
&lt;p&gt;Popular services are built on it, like &lt;em&gt;MySpace&lt;/em&gt; and &lt;em&gt;Ghost&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It’s also the foundation for other tools and frameworks, like &lt;em&gt;Kraken&lt;/em&gt; and &lt;em&gt;Sails&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Installing (via yarn)&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add express&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Installing (via npm)&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm install express --save&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Let’s write our first Expression app.&lt;/p&gt;
&lt;p&gt;I’m gonna use ES6 features here because it’s cool (and because I want to). To try it by yourself make sure you use &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; or anything that can transpile your code to ES5.&lt;/p&gt;
&lt;p&gt;First, the boilerplate: importing stuff:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;express&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, that’s enough to get an &lt;code class=&quot;language-text&quot;&gt;app&lt;/code&gt; instance. Now let’s define our single route. With that our server will be able to answer &lt;code class=&quot;language-text&quot;&gt;http://localhost:&amp;lt;port&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Hello, World&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; method provide a callback function, where we can access the &lt;strong&gt;request&lt;/strong&gt; (&lt;code class=&quot;language-text&quot;&gt;req&lt;/code&gt;) and the &lt;strong&gt;response&lt;/strong&gt; (&lt;code class=&quot;language-text&quot;&gt;res&lt;/code&gt;) parameters. These parameters inherit from &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_incomingmessage&quot;&gt;http.IncomingMessage&lt;/a&gt; and &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_serverresponse&quot;&gt;http.ServerResponse&lt;/a&gt; Node classes respectively, so we’re able to access their methods as well. For instance, we can do:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello, it&apos;s me again&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is that so? Not quite, we still need to tell it to listen some port:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if I want to get some information to know if the server is really running? Well, you can attach a callback function when calling &lt;code class=&quot;language-text&quot;&gt;listen&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; server &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Server running at http://localhost:&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now our app is ready. Let’s put it to run:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$ node app.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should see the following output:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Server running at http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I didn’t get it. What did we do exactly?&lt;/p&gt;
&lt;h2&gt;Middleware&lt;/h2&gt;
&lt;p&gt;Well, we defined a custom &lt;a href=&quot;http://expressjs.com/en/guide/writing-middleware.html&quot;&gt;middleware&lt;/a&gt;. They’re functions executed &lt;strong&gt;sequentially&lt;/strong&gt; that access the &lt;strong&gt;request&lt;/strong&gt;, &lt;strong&gt;response&lt;/strong&gt; and the next &lt;strong&gt;middleware&lt;/strong&gt;, being responsable to handle the response (or pass it to the other &lt;em&gt;middleware&lt;/em&gt;). They are stacked into each other.&lt;/p&gt;
&lt;p&gt;Inside each middleware we can do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Data Parsing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and so on…&lt;/p&gt;
&lt;p&gt;When a request comes in, it passes through each middleware before reaching the routes, like a plumbing pipe.&lt;/p&gt;
&lt;p&gt;Calling &lt;code class=&quot;language-text&quot;&gt;next()&lt;/code&gt; the middlware passes the control to the next middlware available in the stack to handle the request. Don’t &lt;del&gt;ever ever&lt;/del&gt; try to call &lt;code class=&quot;language-text&quot;&gt;next()&lt;/code&gt; after your response is completed (it’ll cause &lt;strong&gt;errors&lt;/strong&gt;, believe me).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./middleware-stack.png&quot; alt=&quot;Middleware Stack&quot;&gt;&lt;/p&gt;
&lt;p&gt;For a more detailed explanation, take a look at: &lt;a href=&quot;http://javascript.tutorialhorizon.com/2014/09/19/understanding-expressjs-middleware-with-a-visual-example/&quot;&gt;Understanding expressjs middleware with a visual example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also borrowed the image below from the Express site itself. It helps to explain each middleware piece.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./express-middleware-stack.png&quot; alt=&quot;Express Middleware&quot;&gt;&lt;/p&gt;
&lt;p&gt;So, you need a JSON as a result, right? Easy, just send a JavaScript object as response:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/blocks-as-json&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; blocks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Fixed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Movable&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Rotating&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;blocks&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;send&lt;/code&gt; function converts Object and Arrays to JSON.&lt;/p&gt;
&lt;p&gt;Did I hear HTML? All right, &lt;code class=&quot;language-text&quot;&gt;send&lt;/code&gt; function can handle it as well (magic!):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/blocks-as-html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; blocks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Fixed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Movable&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Rotating&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; html &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;ul&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  blocks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; html &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;li&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;block&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/li&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  html &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;/ul&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;html&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, &lt;strong&gt;this is just an example&lt;/strong&gt;. If you really need to do &lt;strong&gt;server-side rendering&lt;/strong&gt; go for &lt;a href=&quot;http://www.embeddedjs.com/&quot;&gt;ESJ&lt;/a&gt;, &lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot;&gt;Pug&lt;/a&gt; (formerly &lt;em&gt;Jade&lt;/em&gt;), &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt; ou any shinny template engine you like.&lt;/p&gt;
&lt;h2&gt;Redirecting&lt;/h2&gt;
&lt;p&gt;To redirecto to a relative path, use the &lt;code class=&quot;language-text&quot;&gt;redirect&lt;/code&gt; method available on &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt; object:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/i-will-not-be-here-for-a-while&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default it’ll respond with a &lt;strong&gt;HTTP 302&lt;/strong&gt; status code (Moved Temporarly). In order to change it (to &lt;strong&gt;HTTP 301&lt;/strong&gt; [Moved Permanently], for instance), pass it as the first parameter:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/i-am-definitely-not-here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;301&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Send files&lt;/h2&gt;
&lt;p&gt;Suppose that we have a &lt;strong&gt;index.html&lt;/strong&gt; file in a public folder that we want to serve at &lt;code class=&quot;language-text&quot;&gt;/home&lt;/code&gt;. How can we do it with Express? Piece of cake:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/home&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/public/index.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pay attention to the &lt;code class=&quot;language-text&quot;&gt;__dirname&lt;/code&gt;. It’s necessary to correctly locate our &lt;strong&gt;index.html&lt;/strong&gt; based on the current path. We could’ve use &lt;code class=&quot;language-text&quot;&gt;./public/index.html&lt;/code&gt; instead as well.&lt;/p&gt;
&lt;h2&gt;Send files with express.static&lt;/h2&gt;
&lt;p&gt;We can also use the &lt;code class=&quot;language-text&quot;&gt;express.static&lt;/code&gt; middleware (the only &lt;strong&gt;middleware&lt;/strong&gt; that’s current shipped with Express) to do the job:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/home&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/public/index.html&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if I have a bunch of files in the public direcetory? You don’t expect me to reference one-by-one, don’t you?
Of course not. Just tell &lt;code class=&quot;language-text&quot;&gt;express.static&lt;/code&gt; to &lt;strong&gt;serves everything&lt;/strong&gt; under the specified folder:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/home&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;public&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Redux]]></title><description><![CDATA[Once upon a time there was a couple of engineers at Facebook who weren’t happy about their apps state control. The behaviour was…]]></description><link>https://helton.github.io/blog/redux/</link><guid isPermaLink="false">https://helton.github.io/blog/redux/</guid><pubDate>Sun, 29 Dec 2019 12:39:00 GMT</pubDate><content:encoded>&lt;p&gt;Once upon a time there was a couple of engineers at Facebook who weren’t happy about their apps state control. The behaviour was unpredictable and it was hard do add new features to the codebase. So, they made Flux.&lt;/p&gt;
&lt;p&gt;Some time later, Dan Abramov borrowed their ideas and made a better library: &lt;strong&gt;Redux&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;h3&gt;Installing Redux (via yarn):&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$ yarn add redux&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Installing Redux (via npm):&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$ npm install redux --save&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Using CDN&lt;/h3&gt;
&lt;p&gt;If you want to use it directly on your view (html page), just put the redux.js (or redux.js.min) in your &lt;code class=&quot;language-text&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.
There a few CDNs availables. Just some of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js&quot;&gt;https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.min.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cdn.jsdelivr.net/npm/redux@4.0.5/lib/redux.min.js&quot;&gt;https://cdn.jsdelivr.net/npm/redux@4.0.5/lib/redux.min.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Concepts&lt;/h2&gt;
&lt;p&gt;Redux is based in the 3 following principles:&lt;/p&gt;
&lt;h3&gt;a) A single immutable state (&lt;em&gt;one state to rule them all!&lt;/em&gt;)&lt;/h3&gt;
&lt;p&gt;Everything that changes in your application, including the data and the UI state, is contained in a single JavaScript object called &lt;strong&gt;state&lt;/strong&gt; or &lt;strong&gt;state tree&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In Redux all mutations are explicit and doing so we’re able keep track of them over time.&lt;/p&gt;
&lt;h3&gt;b) The state is read-only (&lt;em&gt;you can’t touch this&lt;/em&gt;)&lt;/h3&gt;
&lt;p&gt;Anytime you want to modify the state you need to dispatch an action. An action is a plain JavaScript object that represents the changes of the data.&lt;/p&gt;
&lt;p&gt;The structure of the action object is up to you, the only requirement is that it should have a &lt;strong&gt;type&lt;/strong&gt; property (frequently a String), which identify what the action is supposed to change.&lt;/p&gt;
&lt;p&gt;Don’t matter where the information comes from, it’ll be added to the application through actions. This allows us to keep a fine control over our application changes, making its behaviour predictable.&lt;/p&gt;
&lt;p&gt;Remember to put only the minimal amount of information into the action object, just enough to identify what changed and what will be updated in the &lt;strong&gt;state&lt;/strong&gt; object (by the &lt;strong&gt;reducers&lt;/strong&gt; functions).&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; action &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CHANGE_NAME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
        id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Helton&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This approach scales well to medium and large applications.&lt;/p&gt;
&lt;h3&gt;c) Reducers handle state mutation through actions ((state, action) =&gt; new state!)&lt;/h3&gt;
&lt;p&gt;Reducers are functions that take the previous &lt;strong&gt;state&lt;/strong&gt; of the application and the &lt;strong&gt;action&lt;/strong&gt; being dispatched and returns the next &lt;strong&gt;state&lt;/strong&gt;. It can’t modify the current state, it should return a brand new object (the function should be pure). And no, it won’t be slow!&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;INCREMENT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;DECREMENT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;The &lt;em&gt;store&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;The store binds together the three principles of Redux. It holds the application’s state object and lets you dispatch actions.&lt;/p&gt;
&lt;p&gt;When you create it, you specify a reducer function.&lt;/p&gt;
&lt;p&gt;In order to use store we need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Importing the _createStore _function:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a local store passing as argument the reducer previously created:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;If you want more information, don’t forget to check out the awesome resources below. It’s worth it, trust me!&lt;/p&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux official website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Courses&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/getting-started-with-redux&quot;&gt;Egghead.io - Getting Started with Redux [by Dan Abramov]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/building-react-applications-with-idiomatic-redux&quot;&gt;Egghead.io - Building React Applications with Idiomatic Redux [by Dan Abramov]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Awesome Lists&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xgrommx/awesome-redux&quot;&gt;awesome-redux: Awesome list of Redux examples and middlewares&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cheatsheets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devhints.io/awesome-redux&quot;&gt;Awesome Redux cheatsheet, by Rico Sta. Cruz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Introduction]]></title><description><![CDATA[A while ago I’ve written an introduction to a book I was planning to release. A book about technology, the challenges, the motivations and…]]></description><link>https://helton.github.io/blog/introduction/</link><guid isPermaLink="false">https://helton.github.io/blog/introduction/</guid><pubDate>Sun, 29 Dec 2019 12:28:00 GMT</pubDate><content:encoded>&lt;p&gt;A while ago I’ve written an introduction to a book I was planning to release.&lt;/p&gt;
&lt;p&gt;A book about technology, the challenges, the motivations and what was going on under the hood.&lt;/p&gt;
&lt;p&gt;Nowadays I think it makes more sense to put it in a blog post, so here it goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every developer read tons of material nowadays, maybe too many. Sometimes is good to find a place where you can organize your thoughts, ideas and be able to run into it when you need it. How many times do you find yourself thinking: “Where did I read that? I can’t remember… I should’ve wrote it down back there…“. Believe me, that happens more frequently than we’re willing to accept.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Well, that’s this whole book idea. Really. I’ll put any information that I find useful. If you find it too, share it, open an issue, I’ll gladly review it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;My intention is to keep up to date with the new technologies and contents that are &lt;del&gt;thrown at&lt;/del&gt; shown to us everyday.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ll keep it simple as possible, attached to the core ideas and with useful snippets. Is the content still unclear? Well, pretty much everything that I read about programming (tools, concepts, ideas, etc). I know that the scope is really broad, but I’ve to start somewhere.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I think is interesting to share that writing something (a blog post, an note or even a book) is a good way to learn. Seriously. While we write, we put a lot of effort in organize our thoughts and express ourselves in a way that at least makes sense (I’m not sure if I succeeded the way I wanted).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Since this book is about my notes and I’ll keep learning as far and as much as I can, it’ll never be finished.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;People don’t know me as a serious guy (to be honest, they don’t know me at all), so expect some jokes along the way (I’ll do my best, &lt;del&gt;or not, who knows?&lt;/del&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Ah, I almost forgot: I’m not a native English speaker (you probably noticed that by now as you read some &lt;del&gt;terrible&lt;/del&gt; mistakes &lt;del&gt;that made your eyes bleed&lt;/del&gt;). If you find anything wrong, &lt;del&gt;keep it the way it’s&lt;/del&gt; don’t be shy, notify me. I’m here to learn, like everyone else.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I guess it’s enough for the introduction. Let’s get started!&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Hello, World!]]></title><description><![CDATA[Well, it’s about time to have a blog where I can share things I’m learning, right? It’ll be a good way to keep me motivated and also a…]]></description><link>https://helton.github.io/blog/hello-world/</link><guid isPermaLink="false">https://helton.github.io/blog/hello-world/</guid><pubDate>Sun, 29 Dec 2019 12:23:00 GMT</pubDate><content:encoded>&lt;p&gt;Well, it’s about time to have a blog where I can share things I’m learning, right?&lt;/p&gt;
&lt;p&gt;It’ll be a good way to keep me motivated and also a resource to remember things I’ve been learning and things I’ve been through.&lt;/p&gt;
&lt;p&gt;Stay tuned to more content!&lt;/p&gt;</content:encoded></item></channel></rss>